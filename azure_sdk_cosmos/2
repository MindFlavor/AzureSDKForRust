#![cfg(all(test, feature = "test_e2e"))]
use azure_sdk_core::prelude::*;
use azure_sdk_cosmos::prelude::*;
use std::borrow::Cow;
use std::error::Error;
#[macro_use]
extern crate serde_derive;

// Now we create a sample struct. The Cow trick
// allows us to use the same struct for serializing
// (without having to own the items if not needed) and
// for deserializing (where owning is required).
// We do not need to define the "id" field here, it will be
// specified in the Document struct below.
#[derive(Serialize, Deserialize, Clone, Debug)]
struct MySampleStruct<'a> {
    a_string: Cow<'a, str>,
    a_number: u64,
    a_timestamp: i64,
}

// This example expects you to have created a collection
// with partitionKey on "id".
#[tokio::main]
async fn attachment() -> Result<(), Box<dyn Error>> {
    const DATABASE_NAME: &str = "test-cosmos-db-attachment";
    const COLLECTION_NAME: &str = "test-collection-attachment";
    const DOCUMENT_NAME: &str = "test-document-name-attachment";

    let client = setup::initialize().unwrap();

    let _create_database_response = client
        .create_database()
        .with_database_name(&DATABASE_NAME)
        .execute()
        .await
        .unwrap();

    let client = client.with_database(&DATABASE_NAME);
    let client = client.with_collection(&COLLECTION_NAME);

    let id = format!("unique_id{}", 100);

    let doc = Document::new(
        id.clone(),
        MySampleStruct {
            a_string: Cow::Borrowed("Something here"),
            a_number: 100,
            a_timestamp: chrono::Utc::now().timestamp(),
        },
    );

    // let's add an entity.
    match client
        .create_document()
        .with_document(&doc)
        .with_partition_keys(PartitionKeys::new().push(doc.document_attributes.id())?)
        .execute()
        .await
    {
        Ok(_) => {
            println!("document created");
        }
        Err(err) => {
            println!("already exists? ==> {:?}", err);
        }
    };

    let mut partition_keys = PartitionKeys::new();
    partition_keys.push(doc.document_attributes.id())?;
    let document_client = client.with_document(&id, &partition_keys);

    let ret = document_client.list_attachments().execute().await?;

    println!("{:#?}", ret);

    //let attachment_client = document_client.with_attachment(&"myref00");

    //let att = attachment_client.get().execute().await?;
    //println!("att == {:#?}", att);

    println!("creating");
    let attachment_client = document_client.with_attachment(&"myref03");
    let resp = attachment_client
        .create_reference()
        .with_content_type("image/jpeg")
        .with_media(
            "https://cdn.pixabay.com/photo/2020/01/11/09/30/abstract-background-4756987__340.jpg",
        )
        .execute()
        .await?;
    println!("resp == {:#?}", resp);

    println!("replacing");
    let attachment_client = document_client.with_attachment(&"myref03");
    let resp = attachment_client
        .replace_reference()
        .with_content_type("image/jpeg")
        .with_media(
            "https://Adn.pixabay.com/photo/2020/01/11/09/30/abstract-background-4756987__340.jpg",
        )
        .execute()
        .await?;
    println!("resp == {:#?}", resp);

    //let attachment_client = document_client.with_attachment(&"slug00");
    //let resp = attachment_client
    //    .replace_slug()
    //    .with_content_type("text/plain")
    //    .with_body(b"FFFFF")
    //    .execute()
    //    .await?;

    //println!("resp == {:#?}", resp);

    println!("deleting");
    let resp_delete = attachment_client.delete().execute().await?;
    println!("resp_delete == {:#?}", resp_delete);

    Ok(())
}
